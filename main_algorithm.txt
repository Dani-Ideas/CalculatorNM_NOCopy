# sintetic division
# sintetic division
# sintetic division
# sintetic division

def ruffini(coefficients, root):
# Coeficientes de la ecuación
n = len(coefficients) - 1
result = [0] *n # Resultado de la división
result[0] = coefficients[0] # Primer coeficiente
# Proceso de Ruffini
for i in range(1, n):
result[i]= coefficients[i] + root result[i - 1]
return result, result[-1] # Devuelve el cociente y el residuo
# Entrada del usuario
Copy coc
input_str = input("Ingresa los coeficientes de la ecuación separados por comas (ej: 1,
coefficients = list(map(float, input_str.split(',')))
root = float(input("Ingresa la raíz (valor de x) que deseas usar: "))
# Llamada al método de Ruffini
quotient, remainder = ruffini (coefficients, root)
print("Cociente:", quotient)
print("Residuo:", remainder)


# Raphson Method
# Raphson Method
# Raphson Method
# Raphson Method

# An example function whose solution
# is determined using Bisection Method.
# The function is x^3 - x^2 + 2
def func( x ):
    return x * x * x - x * x + 2

# Derivative of the above function
# which is 3*x^x - 2*x
def derivFunc( x ):
    return 3 * x * x - 2 * x

# Function to find the root
def newtonRaphson( x ):
    h = func(x) / derivFunc(x)
    while abs(h) >= 0.0001:
        h = func(x)/derivFunc(x)

        # x(i+1) = x(i) - f(x) / f'(x)
        x = x - h

    print("The value of the root is : ",
                             "%.4f"% x)

# Driver program to test above
x0 = -20 # Initial values assumed
newtonRaphson(x0)



# Bisection Method
#Bisection Method
#Bisection Method

# An example function whose
# solution is determined using
# Bisection Method.
# The function is x^3 - x^2  + 2
def func(x):
    return x*x*x - x*x + 2

# Prints root of func(x)
# with error of EPSILON
def bisection(a,b):

    if (func(a) * func(b) >= 0):
        print("You have not assumed right a and b\n")
        return

    c = a
    while ((b-a) >= 0.01):

        # Find middle point
        c = (a+b)/2

        # Check if middle point is root
        if (func(c) == 0.0):
            break

        # Decide the side to repeat the steps
        if (func(c)*func(a) < 0):
            b = c
        else:
            a = c

    print("The value of root is : ","%.4f"%c)

# Driver code
# Initial values assumed
a =-200
b = 300
bisection(a, b)
